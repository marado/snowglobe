diff --git a/trunk/indra/newview/lltexturefetch.cpp b/trunk/indra/newview/lltexturefetch.cpp
index 8ff9e9f..f44014d 100644
--- a/trunk/indra/newview/lltexturefetch.cpp
+++ b/trunk/indra/newview/lltexturefetch.cpp
@@ -800,7 +800,7 @@ bool LLTextureFetchWorker::doWork(S32 param)
 			// Set the throttle to the entire bandwidth, assuming UDP packets will get priority
 			// when they are needed
 			F32 max_bandwidth = mFetcher->mMaxBandwidth;
-			if ((mFetcher->getHTTPQueueSize() >= HTTP_QUEUE_MAX_SIZE) ||
+			if ((mFetcher->getNumHTTPRequests() >= HTTP_QUEUE_MAX_SIZE) ||
 				(mFetcher->getTextureBandwidth() > max_bandwidth))
 			{
 				// Make normal priority and return (i.e. wait until there is room in the queue)
@@ -1916,6 +1916,7 @@ bool LLTextureFetch::receiveImageHeader(const LLHost& host, const LLUUID& id, U8
 	{
 // 		llwarns << "Received header for non active worker: " << id << llendl;
 		++mBadPacketCount;
+		LLMutexLock lock2(&mNetworkQueueMutex);
 		mCancelQueue[host].insert(id);
 		return false;
 	}
@@ -1944,6 +1945,7 @@ bool LLTextureFetch::receiveImageHeader(const LLHost& host, const LLUUID& id, U8
 	if (!res)
 	{
 		++mBadPacketCount;
+		LLMutexLock lock2(&mNetworkQueueMutex);
 		mCancelQueue[host].insert(id);
 	}
 	else
@@ -1988,6 +1990,7 @@ bool LLTextureFetch::receiveImagePacket(const LLHost& host, const LLUUID& id, U1
 	if (!res)
 	{
 		++mBadPacketCount;
+		LLMutexLock lock2(&mNetworkQueueMutex);
 		mCancelQueue[host].insert(id);
 		return false;
 	}
diff --git a/trunk/indra/newview/lltexturefetch.h b/trunk/indra/newview/lltexturefetch.h
index c48f609..5eca0ba 100644
--- a/trunk/indra/newview/lltexturefetch.h
+++ b/trunk/indra/newview/lltexturefetch.h
@@ -76,8 +76,8 @@ public:
 	S32 getFetchState(const LLUUID& id, F32& decode_progress_p, F32& requested_priority_p,
 					  U32& fetch_priority_p, F32& fetch_dtime_p, F32& request_dtime_p);
 	void dump();
-	S32 getNumRequests() { return mRequestMap.size(); }
-	S32 getNumHTTPRequests() { return mHTTPTextureQueue.size(); }
+	S32 getNumRequests() const { LLMutexLock lock(&mQueueMutex); return mRequestMap.size(); }
+	S32 getNumHTTPRequests() const { LLMutexLock lock(&mNetworkQueueMutex); return mHTTPTextureQueue.size(); }
 	
 	// Public for access by callbacks
 	void lockQueue() { mQueueMutex.lock(); }
@@ -91,7 +91,6 @@ protected:
 	void removeFromNetworkQueue(LLTextureFetchWorker* worker, bool cancel);
 	void addToHTTPQueue(const LLUUID& id);
 	void removeFromHTTPQueue(const LLUUID& id);
-	S32 getHTTPQueueSize() { return (S32)mHTTPTextureQueue.size(); }
 	void removeRequest(LLTextureFetchWorker* worker, bool cancel);
 	// Called from worker thread (during doWork)
 	void processCurlRequests();	
@@ -110,8 +109,8 @@ public:
 	S32 mBadPacketCount;
 	
 private:
-	LLMutex mQueueMutex;
-	LLMutex mNetworkQueueMutex;
+	mutable LLMutex mQueueMutex;
+	mutable LLMutex mNetworkQueueMutex;
 
 	LLTextureCache* mTextureCache;
 	LLImageDecodeThread* mImageDecodeThread;
