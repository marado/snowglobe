Index: indra/llmath/CMakeLists.txt
===================================================================
--- indra/llmath/CMakeLists.txt	(revision 3229)
+++ indra/llmath/CMakeLists.txt	(working copy)
@@ -23,6 +23,7 @@
     llsdutil_math.cpp
     m3math.cpp
     m4math.cpp
+    spherical.cpp
     raytrace.cpp
     v2math.cpp
     v3color.cpp
@@ -62,6 +63,7 @@
     llvolumemgr.h
     m3math.h
     m4math.h
+    spherical.h
     raytrace.h
     v2math.h
     v3color.h
Index: indra/llmath/spherical.cpp
===================================================================
--- indra/llmath/spherical.cpp	(revision 0)
+++ indra/llmath/spherical.cpp	(revision 0)
@@ -0,0 +1,56 @@
+
+// A stub/incomplete spherical and polar coordinate classes
+
+
+#include "spherical.h"
+
+polar::polar(F64 x,F64 y)
+{
+	mRadius=sqrt(y*y+x*x);
+
+	//Quadrent detction
+	if(x==0 && y==0)
+	{
+		mTheta=0;
+	}
+	else if(x>=0)
+	{
+		mTheta=asin(y/mRadius);
+	}
+	else
+	{
+		mTheta=-1.0*asin(y/mRadius)+F_PI;
+	}
+}
+
+
+void spherical::shift_axis(F64 sideRealTime,F64 dec)
+{
+		//Spherical axis shift
+		//Shift one spherical axis to another, eg celestial to geographic
+
+		F64 hourAngle=sideRealTime-mAzimuth;
+
+		F64 R1=sin(dec)*sin(mAltitude)+cos(dec)*cos(mAltitude)*cos(hourAngle);
+		F64 RX=cos(dec)*sin(mAltitude)-sin(dec)*cos(mAltitude)*cos(hourAngle);
+		F64 RY=-1.0*cos(mAltitude)*sin(hourAngle);
+
+		polar rp(RX,RY);
+
+		mAzimuth=rp.mTheta;
+
+		polar rp2(rp.mRadius,R1);
+
+		mAltitude=rp2.mTheta;	
+}
+
+LLVector3d spherical::asVector()
+{
+	//Asumes a decline vector for altitude
+	LLVector3d result;
+	result.mdV[VX]=mRadius * cos (mAltitude) * cos(mAzimuth);
+	result.mdV[VY]=mRadius * cos (mAltitude) * sin(mAzimuth);
+	result.mdV[VZ]=mRadius * sin (mAltitude);
+
+	return result;
+}
Index: indra/llmath/spherical.h
===================================================================
--- indra/llmath/spherical.h	(revision 0)
+++ indra/llmath/spherical.h	(revision 0)
@@ -0,0 +1,55 @@
+#include "stdtypes.h"
+#include "v3dmath.h"
+
+// Very basic stub class for polar coordinates
+// Accept a constructor containing cartesian co-ordinates
+// provide theta and R as public variables
+
+class polar
+{
+	public:
+		inline polar();
+		polar(F64 x,F64 y);
+
+		// Helper function to convert Degrees to Radians
+		static inline F64 radFromDegrees(F64 degrees) { return ((degrees/360.0)*F_TWO_PI); };
+
+		// Helper function to convert Hours to Radians (24 Hours = 2 PI rads = 1 rev)
+		static inline F64 radFromHours(F64 hours) { return ((hours/24.0)*F_TWO_PI); };
+
+		// Helper function to convert Hours:Mins:Secs to radians
+		static inline F64 radFromHMS(F64 hours,F64 mins, F64 secs){return ((F_PI/12.0)*hours) +((F_PI/720.0)*(double)mins) + ((F_PI/43200.0)*(double)secs);};
+
+		// Helper function to convert Degrees:Mins:Secs to radians
+		static inline F64 radFromDMS(F64 degrees,F64 mins,F64 secs){return ((degrees+(mins/60.0)+(secs/(60.0*60.0)))/180)*F_PI;};
+
+		F64 mTheta;
+		F64 mRadius;
+};
+
+// Very Basic stub class for spherical coordinates
+// Accept constructor that contains the 3 spherical co-ordinates
+// and provides a rotate axis function and a to cartesian function
+
+class spherical
+{
+	public:
+
+	inline spherical();
+	inline spherical(F64 azimuth, F64 altitude, F64 radius){ mAzimuth=azimuth; mAltitude=altitude; mRadius=radius;};
+
+	F64 mAzimuth; //Also known as RA
+	F64 mAltitude; //Also declination
+	F64 mRadius; 
+
+	// Shift the spherical co-ordinates by the spherical rotation
+	// described by hourangle and dec
+	// these may also be described as longitude and latitude
+	// but on the earth longitude wrt a fixed point in the sky depends on the time of day
+	// so hour angle is a more common term
+	void shift_axis(F64 hourangle,F64 dec);
+
+	// Convert to cartesian
+	LLVector3d asVector();
+
+};
Index: indra/newview/app_settings/settings.xml
===================================================================
--- indra/newview/app_settings/settings.xml	(revision 3229)
+++ indra/newview/app_settings/settings.xml	(working copy)
@@ -9291,7 +9291,18 @@
       <key>Value</key>
       <integer>0</integer>
     </map>
-    <key>StatsAutoRun</key>
+	<key>StarObserverLatitude</key>
+	<map>
+      <key>Comment</key>
+      <string>Observer latitude for plotting real star maps</string>
+      <key>Persist</key>
+      <integer>1</integer>
+      <key>Type</key>
+      <string>F32</string>
+      <key>Value</key>
+      <real>54.0</real>
+	</map>
+	<key>StatsAutoRun</key>
     <map>
       <key>Comment</key>
       <string>Play back autopilot</string>
@@ -11236,7 +11247,18 @@
       <map>
       </map>
     </map>
-    <key>VFSOldSize</key>
+	<key>UseYBSCStars</key>
+	<map>
+      <key>Comment</key>
+      <string>Use real stars in the sky from the Yale BSC.(requires relog)</string>
+      <key>Persist</key>
+      <integer>1</integer>
+      <key>Type</key>
+      <string>Boolean</string>
+      <key>Value</key>
+      <bool>1</bool>
+	</map>
+	<key>VFSOldSize</key>
     <map>
       <key>Comment</key>
       <string>[DO NOT MODIFY] Controls resizing of local file cache</string>
Index: indra/newview/lldrawpoolwlsky.cpp
===================================================================
--- indra/newview/lldrawpoolwlsky.cpp	(revision 3229)
+++ indra/newview/lldrawpoolwlsky.cpp	(working copy)
@@ -284,9 +284,9 @@
 		LLImageGL * tex  = gSky.mVOSkyp->mFace[LLVOSky::FACE_MOON]->getTexture();
 		gGL.getTexUnit(0)->bind(tex);
 
+		renderStars();
+
 		renderHeavenlyBodies();
-
-		renderStars();
 		
 
 	glPopMatrix();
Index: indra/newview/llvowlsky.cpp
===================================================================
--- indra/newview/llvowlsky.cpp	(revision 3229)
+++ indra/newview/llvowlsky.cpp	(working copy)
@@ -40,7 +40,10 @@
 #include "llface.h"
 #include "llwlparammanager.h"
 #include "llviewercontrol.h"
+#include "spherical.h"
 
+#include "time.h"
+
 #define DOME_SLICES 1
 const F32 LLVOWLSky::DISTANCE_TO_STARS = (HORIZON_DIST - 10.f)*0.25f;
 
@@ -77,16 +80,6 @@
 	return 2 * ((getNumStacks() - 2) * (getNumSlices() + 1)) + 1 ; 
 }
 
-inline U32 LLVOWLSky::getStarsNumVerts(void)
-{
-	return 1000;
-}
-
-inline U32 LLVOWLSky::getStarsNumIndices(void)
-{
-	return 1000;
-}
-
 LLVOWLSky::LLVOWLSky(const LLUUID &id, const LLPCode pcode, LLViewerRegion *regionp)
 	: LLStaticViewerObject(id, pcode, regionp, TRUE)
 {
@@ -489,7 +482,7 @@
 	if (mStarsVerts.notNull())
 	{
 		mStarsVerts->setBuffer(LLDrawPoolWLSky::STAR_VERTEX_DATA_MASK);
-		mStarsVerts->draw(LLRender::POINTS, getStarsNumIndices(), 0);
+		mStarsVerts->draw(LLRender::POINTS, mStarVertices.size(), 0);
 	}
 }
 
@@ -534,17 +527,178 @@
 
 void LLVOWLSky::initStars()
 {
-	// Initialize star map
-	mStarVertices.resize(getStarsNumVerts());
-	mStarColors.resize(getStarsNumVerts());
-	mStarIntensities.resize(getStarsNumVerts());
+	llstat status;
 
+	if(!gSavedSettings.getBOOL("UseYBSCStars") || LLFile::stat("YBScatalog",&status)==0)
+	{
+		if(!initStarsYBSC())
+			initStarsRandom();
+	}
+	else
+	{
+		initStarsRandom();
+	}
+}
+
+bool LLVOWLSky::initStarsYBSC()
+{
+	mStarVertices.clear();
+	mStarColors.clear();
+	mStarIntensities.clear();
+	
+	std::fstream catalog("YBScatalog",std::ios_base::in);
+	
+	if(!catalog.is_open())
+	{
+		return false;
+	}
+
+	char buffer[255];
+
+	while(!catalog.eof())
+	{
+		catalog.getline(buffer,255); //read upto 255 characters
+
+		// The YBSC has some blank entries that have been removed
+		// but have been left to preserve sequence
+		// Test the field that should contain the first H value in J2000 RA
+		// If this is a space then the field is a legacy deleted field so skip
+		if(buffer[75]==32)
+			continue;
+
+		// get the observers latitude
+		F32 latitude=gSavedSettings.getF32("StarObserverLatitude");
+		latitude=llclamp(latitude,(F32)-90.0,(F32)90.0);
+
+		//Read anunal proper motions
+		F32 pmRA=extractF32YBSC(buffer,YBSC_PM_RA,YBSC_PM_RA_FIELD_LENGTH);
+		F32 pmD=extractF32YBSC(buffer,YBSC_PM_D,YBSC_PM_D_FIELD_LENGTH);
+	 
+		//Set our epoc to J2000 00:00:00 01/01/2000
+		time_t epoc=946706400; //Unix time
+		double diff=difftime(time(NULL),epoc);			
+
+		diff=diff/(double)(60*60*24*365); // Seconds in year
+		// Our stars have moved on my diff* proper motion arcseconds per year
+
+		// Extract Right Assention from H:M:S data and store as radians
+		// J2000 RA data is fields 76 onwards
+		// in format HHMMSS.S
+		U8 h=extractU8YBSC(buffer,YBSC_J2000_RA_H);
+		U8 m=extractU8YBSC(buffer,YBSC_J2000_RA_M);
+		F32 s=extractF32YBSC(buffer,YBSC_J2000_RA_S,YBSC_J2000_RA_S_FIELD_LENGTH);
+		F64 RA=-1.0*polar::radFromHMS(h,m,s+(pmRA*diff));
+
+		// Extract Declination in D:M:S and convert to radians
+		// J2000 Declination data is in format -DDMMSS
+		U8 d=extractU8YBSC(buffer,YBSC_J2000_D_D);
+		m=extractU8YBSC(buffer,YBSC_J2000_D_M);
+		s=extractU8YBSC(buffer,YBSC_J2000_D_S);
+		F64 D = polar::radFromDMS(d,m,s+(pmD*diff));
+
+		// Get the quadrent and set decline appropratly, note this depends on our latitude
+		// as the real earth is round, so in the south below latitue 90 the declinations are inverted wrt
+		// the northen hemisphere. But star data is based on celistial axis
+		if(buffer[YBSC_J2000_D_Q]=='-')
+		{
+			D=D*-1.0;
+		}
+
+		//Read the magnitude value
+		F32 M=extractF32YBSC(buffer,YBSC_J2000_MAG,YBSC_J2000_MAG_FIELD_LENGTH);
+	
+		//Add Position data to spherical co-ordinate set
+		spherical star(RA,D,DISTANCE_TO_STARS);
+
+		// Hours input here is the current time of day 0-24
+		// Degrees are the observers latitude position
+		// Shift star position to the desired observers position and the current local time
+		time_t now=time(NULL);
+		struct tm * local = localtime(&now);
+		star.shift_axis(polar::radFromHMS(local->tm_hour,local->tm_min,local->tm_sec),polar::radFromDegrees(latitude));
+		
+		// Convert to cartesian	
+		LLVector3 pos(star.asVector());
+
+		// Don't render stars below the render horizon
+		// We don't know this until we have done the spherical rotation
+		if(pos.mV[VZ]<0)
+		{
+			continue;
+		}
+
+		mStarVertices.push_back(pos);
+
+		// Brightest star = -1.41
+		// Dimmest visible object = 7.87
+		// Offical Scale is based on 5th root of 100 for
+		// intensity scale of stars eg 2.512^(x-y)
+		// More optimal SL viewing experience 1.6
+
+		double magnitude=pow(1.6,(double)(7.87-M));
+		magnitude=2.0*magnitude/pow(1.6,(double)(7.87+1.41));
+	
+		// clamp to a min 0f 0.004, assume 8 bit alpha so a range of 0-1.0
+		// a value of 0.004 will scale to U8=1
+		magnitude=llclamp(magnitude,(double)0.004,(double)2.0);
+		mStarIntensities.push_back((F32)magnitude);
+
+		LLColor4 col;
+
+		// All white is borrrring
+		col.mV[VRED]   = 1.f ;
+		col.mV[VGREEN] = 1.f ;
+		col.mV[VBLUE]  = 1.f ;
+		col.mV[VALPHA] = magnitude;
+		col.clamp();
+
+		mStarColors.push_back(col);
+	}
+
+	catalog.close();
+	return true;
+}
+
+U8 LLVOWLSky::extractU8YBSC(char * buff,U8 pos)
+{
+	char workBuffer[3];
+	unsigned int result;
+
+	memcpy(workBuffer,&buff[pos],2);
+	workBuffer[2]=0;
+
+	sscanf(workBuffer,"%u",&result);
+	return (U8)result;
+}
+
+F32 LLVOWLSky::extractF32YBSC(char * buff,U8 pos,U8 len)
+{
+
+	char * workBuffer=(char *)malloc(len+1);
+	F32 result;
+
+	memcpy(workBuffer,&buff[pos],len);
+	workBuffer[len]=0;
+
+	sscanf(workBuffer,"%f",&result);
+
+	free(workBuffer);
+	return result;
+
+}
+
+void LLVOWLSky::initStarsRandom()
+{
+	mStarVertices.resize(FIXNUMSTARS);
+	mStarColors.resize(FIXNUMSTARS);
+	mStarIntensities.resize(FIXNUMSTARS);
+
 	std::vector<LLVector3>::iterator v_p = mStarVertices.begin();
 	std::vector<LLColor4>::iterator v_c = mStarColors.begin();
 	std::vector<F32>::iterator v_i = mStarIntensities.begin();
 
 	U32 i;
-	for (i = 0; i < getStarsNumVerts(); ++i)
+	for (i = 0; i < mStarVertices.size(); ++i)
 	{
 		v_p->mV[VX] = ll_frand() - 0.5f;
 		v_p->mV[VY] = ll_frand() - 0.5f;
@@ -734,7 +888,7 @@
 	{
 		F32 intensity;						//  max intensity of each star
 		U32 x;
-		for (x = 0; x < getStarsNumVerts(); ++x)
+		for (x = 0; x < mStarVertices.size(); ++x)
 		{
 			F32 sundir_factor = 1;
 			LLVector3 tostar = *v_p;
@@ -774,7 +928,7 @@
 	if (mStarsVerts.isNull())
 	{
 		mStarsVerts = new LLVertexBuffer(LLDrawPoolWLSky::STAR_VERTEX_DATA_MASK, GL_DYNAMIC_DRAW);
-		mStarsVerts->allocateBuffer(getStarsNumVerts(), getStarsNumIndices(), TRUE);
+		mStarsVerts->allocateBuffer(mStarVertices.size(), mStarVertices.size(), TRUE);
 	}
 
 	BOOL success = mStarsVerts->getVertexStrider(verticesp)
@@ -789,7 +943,7 @@
 	// *TODO: fix LLStrider with a real prefix increment operator so it can be
 	// used as a model of OutputIterator. -Brad
 	// std::copy(mStarVertices.begin(), mStarVertices.end(), verticesp);
-	for (U32 vtx = 0; vtx < getStarsNumVerts(); ++vtx)
+	for (U32 vtx = 0; vtx < mStarVertices.size(); ++vtx)
 	{
 		*(verticesp++)  = mStarVertices[vtx];
 		*(colorsp++)    = LLColor4U(mStarColors[vtx]);
Index: indra/newview/llvowlsky.h
===================================================================
--- indra/newview/llvowlsky.h	(revision 3229)
+++ indra/newview/llvowlsky.h	(working copy)
@@ -33,6 +33,28 @@
 #ifndef LL_VOWLSKY_H
 #define LL_VOWLSKY_H
 
+#define FIXNUMSTARS 100
+
+// Layout of the Yale Bright Star Catalog ASCII version
+#define YBSC_J2000_RA_H 75
+#define YBSC_J2000_RA_M 77 
+#define YBSC_J2000_RA_S 79
+#define YBSC_J2000_RA_S_FIELD_LENGTH 4
+
+#define YBSC_J2000_D_Q 83
+#define YBSC_J2000_D_D 84
+#define YBSC_J2000_D_M 86 
+#define YBSC_J2000_D_S 88
+
+#define YBSC_J2000_MAG 102
+#define YBSC_J2000_MAG_FIELD_LENGTH 5
+
+#define YBSC_PM_RA 148
+#define YBSC_PM_RA_FIELD_LENGTH 6
+
+#define YBSC_PM_D 154
+#define YBSC_PM_D_FIELD_LENGTH 6
+
 #include "llviewerobject.h"
 
 class LLVOWLSky : public LLStaticViewerObject {
@@ -77,7 +99,12 @@
 
 	// helper function for initializing the stars.
 	void initStars();
+	bool initStarsYBSC();
+	void initStarsRandom();
 
+	U8 extractU8YBSC(char * buff,U8 pos);
+	F32	extractF32YBSC(char * buff,U8 pos,U8 len);
+
 	// helper function for building the fan vertex buffer.
 	static void buildFanBuffer(LLStrider<LLVector3> & vertices,
 							   LLStrider<LLVector2> & texCoords,
@@ -96,7 +123,7 @@
 	void updateStarColors();
 
 	// helper function for updating the stars geometry.
-	BOOL updateStarGeometry(LLDrawable *drawable);
+	BOOL updateStarGeometry(LLDrawable *drawable);	
 
 private:
 	LLPointer<LLVertexBuffer>					mFanVerts;
